"""
Input for filtering ID fields.
"""
input IDFilterInput {
    """
    Matches if the field is equal to the value.
    """
    eq: ID
    """
    Matches if the field is not equal to the value.
    """
    neq: ID
    """
    Matches if the field is included in the list.
    """
    in: [ID]
    """
    Matches if the field is not included in the list.
    """
    nin: [ID]
}

"""
Input for filtering String fields.
"""
input StringFilterInput {
    """
    Matches if the field is equal to the value.
    """
    eq: String
    """
    Matches if the field is not equal to the value.
    """
    neq: String
    """
    Matches if the field is greater than the value.
    """
    gt: String
    """
    Matches if the field is greater than or equal to the value.
    """
    gte: String
    """
    Matches if the field is less than the value.
    """
    lt: String
    """
    Matches if the field is less than or equal to the value.
    """
    lte: String
    """
    Matches if the field is included in the list.
    """
    in: [String]
    """
    Matches if the field is not included in the list.
    """
    nin: [String]
}

"""
Input for filtering Float fields.
"""
input FloatFilterInput {
    """
    Matches if the field is equal to the value.
    """
    eq: Float
    """
    Matches if the field is not equal to the value.
    """
    neq: Float
    """
    Matches if the field is greater than the value.
    """
    gt: Float
    """
    Matches if the field is greater than or equal to the value.
    """
    gte: Float
    """
    Matches if the field is less than the value.
    """
    lt: Float
    """
    Matches if the field is less than or equal to the value.
    """
    lte: Float
    """
    Matches if the field is included in the list.
    """
    in: [Float]
    """
    Matches if the field is not included in the list.
    """
    nin: [Float]
}

"""
Input for filtering Int fields.
"""
input IntFilterInput {
    """
    Matches if the field is equal to the value.
    """
    eq: Int
    """
    Matches if the field is not equal to the value.
    """
    neq: Int
    """
    Matches if the field is greater than the value.
    """
    gt: Int
    """
    Matches if the field is greater than or equal to the value.
    """
    gte: Int
    """
    Matches if the field is less than the value.
    """
    lt: Int
    """
    Matches if the field is less than or equal to the value.
    """
    lte: Int
    """
    Matches if the field is included in the list.
    """
    in: [Int]
    """
    Matches if the field is not included in the list.
    """
    nin: [Int]
}

"""
Input for filtering Boolean fields.
"""
input BooleanFilterInput {
    """
    Matches if the field is equal to the value.
    """
    eq: Boolean
    """
    Matches if the field is not equal to the value.
    """
    neq: Boolean
}

"""
Input for filtering String list fields.
"""
input StringListFilterInput {
    """
    Matches if all field values match.
    """
    all: [StringFilterInput!]
    """
    Matches if any field values match.
    """
    any: [StringFilterInput!]
    """
    Matches if no field values match.
    """
    none: [StringFilterInput!]
}

"""
Input for filtering Float list fields.
"""
input FloatListFilterInput {
    """
    Matches if all field values match.
    """
    all: [FloatFilterInput!]
    """
    Matches if any field values match.
    """
    any: [FloatFilterInput!]
    """
    Matches if no field values match.
    """
    none: [FloatFilterInput!]
}

"""
Input for filtering Int list fields.
"""
input IntListFilterInput {
    """
    Matches if all field values match.
    """
    all: [IntFilterInput!]
    """
    Matches if any field values match.
    """
    any: [IntFilterInput!]
    """
    Matches if no field values match.
    """
    none: [IntFilterInput!]
}

"""
Input for filtering Boolean list fields.
"""
input BooleanListFilterInput {
    """
    Matches if all field values match.
    """
    all: [BooleanFilterInput!]
    """
    Matches if any field values match.
    """
    any: [BooleanFilterInput!]
    """
    Matches if no field values match.
    """
    none: [BooleanFilterInput!]
}

"""
Input for patching ID fields.
"""
input IDPatchInput {
    """
    Sets the value of the field.
    """
    set: ID
}

"""
Input for patching String fields.
"""
input StringPatchInput {
    """
    Sets the value of the field.
    """
    set: String
}

"""
Input for patching Float fields.
"""
input FloatPatchInput {
    """
    Sets the value of the field.
    """
    set: Float
}

"""
Input for patching Int fields.
"""
input IntPatchInput {
    """
    Sets the value of the field.
    """
    set: Int
}

"""
Input for patching Boolean fields.
"""
input BooleanPatchInput {
    """
    Sets the value of the field.
    """
    set: Boolean
}

"""
Input for patching String list fields.
"""
input StringListPatchInput {
    """
    Sets the value of the field.
    """
    set: [String]
    """
    Append values to the field.
    """
    append: [String]
    """
    Filter values in the field.
    """
    filter: StringListFilterInput
}

"""
Input for patching Float list fields.
"""
input FloatListPatchInput {
    """
    Sets the value of the field.
    """
    set: [Float]
    """
    Append values to the field.
    """
    append: [Float]
    """
    Filter values in the field.
    """
    filter: FloatListFilterInput
}

"""
Input for patching Int list fields.
"""
input IntListPatchInput {
    """
    Sets the value of the field.
    """
    set: [Int]
    """
    Append values to the field.
    """
    append: [Int]
    """
    Filter values in the field.
    """
    filter: IntListFilterInput
}

"""
Input for patching Boolean list fields.
"""
input BooleanListPatchInput {
    """
    Sets the value of the field.
    """
    set: [Boolean]
    """
    Append values to the field.
    """
    append: [Boolean]
    """
    Filter values in the field.
    """
    filter: BooleanListFilterInput
}

"""
Directive used to query previous revisions.
"""
directive @revision(
    """
    Hash of the revision to execute the operation on.
    """
    hash: String!
) on QUERY | MUTATION

"""
Commit is a snapshot of the database at a specific changeset.
"""
type Commit {
    """
    Hash of the commit.
    """
    hash: String!
}

type Query {
    """
    Recursively returns the parent commits starting with the revision this query is based on.
    """
    commits: [Commit!]!    
}
